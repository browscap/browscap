# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

on:
  - pull_request
  - push

name: "Continuous Integration"

env:
  PHP_EXTENSIONS: "json, zip, opcache, mbstring"
  # Note - opcache.enable_cli=1 seems to be crashing phpstan, but ONLY in CI, could not reproduce locally
  # PHP_INI_VALUES: "opcache.enable=1, opcache.enable_cli=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, zend.exception_ignore_args=0"
  PHP_INI_VALUES: "opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, zend.exception_ignore_args=0"
  COMPOSER_OPTIONS: "--optimize-autoloader --prefer-dist -v"
  TOOLS: "composer:v2"

jobs:
  validate:
    name: "Validate composer"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Validate composer.json"
        run: "composer validate --strict"

  lint:
    name: "Linting"

    needs: "validate"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Lint PHP"
        uses: "overtrue/phplint@8.2"

  install:
    name: "Install dependencies"

    needs: "lint"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-18.04"
          - "ubuntu-20.04"

        php-version:
          - "8.1"
          - "8.2"

        dependencies:
          - "lowest"
          - "highest"

        experimental: [false]

        include:
          - operating-system: "ubuntu-20.04"
            php-version: "8.1"
            dependencies: "locked"
            experimental: false
          - operating-system: "ubuntu-20.04"
            php-version: "8.2"
            dependencies: "locked"
            experimental: false
          - operating-system: "ubuntu-20.04"
            php-version: "8.3"
            dependencies: "highest"
            experimental: true

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Install lowest dependencies"
        if: "${{ matrix.dependencies == 'lowest' }}"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Install highest dependencies"
        if: "${{ matrix.dependencies == 'highest' && matrix.experimental == false }}"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Install highest dependencies (Experimental)"
        if: "${{ matrix.dependencies == 'highest' && matrix.experimental == true }}"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable --ignore-platform-reqs"

      - name: "Install locked dependencies"
        if: "${{ matrix.dependencies == 'locked' }}"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }}"

      - name: "Check dependencies with composer"
        run: "composer outdated --direct"

  coding-standards:
    name: "Check Coding Standards with PHPCS"

    needs: "lint"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}, cs2pr"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Run squizlabs/php_codesniffer"
        run: "vendor/bin/phpcs --cache=.phpcs.cache --report=checkstyle -q | cs2pr"

  static-code-analysis:
    name: "Static Code Analysis with PHPStan"

    needs: "lint"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }}"

      - name: "Run phpstan/phpstan"
        run: "vendor/bin/phpstan analyse -c phpstan.neon --memory-limit=768M --no-progress"

  validate-sources:
    name: "Validate sources and tests"

    needs: "lint"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"

        dependencies:
          - "lowest"
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Search for duplicate tests"
        run: "bin/browscap -v check-duplicate-tests"

      - name: "Validate sources and tests"
        run: "bin/browscap -v validate"

  tests:
    name: "UnitTests with PHPUnit"

    needs: "lint"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"
          - "8.2"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Run unit tests with phpunit/phpunit"
        run: "vendor/bin/phpunit -c phpunit.xml.dist --no-coverage --colors"

  code-coverage:
    name: "Code Coverage with PHPUnit"

    needs: "tests"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "xdebug"
          tools: "${{ env.TOOLS }}"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Collect code coverage with Xdebug and phpunit/phpunit"
        run: "vendor/bin/phpunit -c phpunit.xml.dist --colors --coverage-text --coverage-clover=coverage.clover"

      - name: "Upload coverage to Codecov"
        uses: "codecov/codecov-action@v3.1.2"
        with:
          file: "coverage.clover"
          flags: "phpunit"
          verbose: false

  integration-tests:
    name: "Integration Tests with PHPUnit"

    needs: "tests"

    runs-on: "${{ matrix.operating-system }}"

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        operating-system:
          - "ubuntu-20.04"

        php-version:
          - "8.1"
          - "8.2"

        dependencies:
          - "highest"

        test-set:
          - "full"
          - "standard"
          - "lite"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.24.0"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          coverage: "none"
          tools: "${{ env.TOOLS }}"

      - name: "Update dependencies with composer"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ env.COMPOSER_OPTIONS }} --prefer-stable"

      - name: "Run integration tests with phpunit/phpunit for Test-Set 'full'"
        if: "matrix.test-set == 'full'"
        run: "vendor/bin/phpunit -c tests/phpunit-integration.xml.dist --no-coverage --colors tests/UserAgentsTest/V4/FullTest.php"

      - name: "Run integration tests with phpunit/phpunit for Test-Set 'standard'"
        if: "matrix.test-set == 'standard'"
        run: "vendor/bin/phpunit -c tests/phpunit-integration.xml.dist --no-coverage --colors tests/UserAgentsTest/V4/StandardTest.php"

      - name: "Run integration tests with phpunit/phpunit for Test-Set 'lite'"
        if: "matrix.test-set == 'lite'"
        run: "vendor/bin/phpunit -c tests/phpunit-integration.xml.dist --no-coverage --colors tests/UserAgentsTest/V4/LiteTest.php"

      - name: "Upload coverage to Codecov for Test-Set 'full'"
        if: "matrix.test-set == 'full'"
        uses: "codecov/codecov-action@v3.1.2"
        with:
          token: "${{secrets.CODECOV_TOKEN}}"
          file: "coverage-full4.json"
          flags: "full"

      - name: "Upload coverage to Codecov for Test-Set 'standard'"
        if: "matrix.test-set == 'standard'"
        uses: "codecov/codecov-action@v3.1.2"
        with:
          token: "${{secrets.CODECOV_TOKEN}}"
          file: "coverage-standard4.json"
          flags: "standard"

      - name: "Upload coverage to Codecov for Test-Set 'lite'"
        if: "matrix.test-set == 'lite'"
        uses: "codecov/codecov-action@v3.1.2"
        with:
          token: "${{secrets.CODECOV_TOKEN}}"
          file: "coverage-lite4.json"
          flags: "lite"
